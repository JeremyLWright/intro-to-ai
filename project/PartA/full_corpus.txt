Generate audit_trail for all changes to rules	command > generate(audit_trail(changes(rules)))
Do_not allow deleting preservation_attributes in Data_folder	command > - allow(delete(data_folder(preservation_attributes)))
List formally_accepted_files	command > list(formally_accepted_files)
List current_staffing required by a collection	command > list(required(current_staffing, collection))
Verify identity of all people with access_permission on data	validation > identity(people) ^ have(people,access_permission(data))
Compare Service_Level_Agreement to a Service_Level_Agreement template	command > compare(Service_Level_Agreement, template(Service_Level_Agreement))
Transfer ownership to rods	command > transfer(ownership, rods)
Send data to curator of the collection	command > send(data, collection(curator))
On replication of files in collection rename files	when > replication(collection(files)); do > command > rename(files)
Transfer access to staff who have administrative_permission on Data_folder	command > transfer(access,staff(have(administrative_permission(data_folder))))
Rename data	command > rename(data)
Generate audit_trail for each micro_service applied to file and list the controlling_rule	command > generate(audit_trail(application(micro_service,file))) ^ command > list(controlling_rule)
Generate report listing all access_permissions	command > generate(report(list(access_permissions)))
Do_not allow moving data within a Leica folder	command > - allow(move(data, folder(leica)))
List micro_services having persistent_state_information	command > list(micro_services(have(persistent_state_information)))
Verify descriptive_metadata against SIP template	validation > compare(descriptive_metadata, template(sip))
Compare staffing_expertise with collection staffing_expertise_requirements	command > compare(staffing_expertise, collection(staffing_expertise_requirements))
Store definition for each semantic_term in the semantic_term_list	command > store(definition(semantic_term_list(semantic_term)))
Send report on evaluation of assessment_criteria to certifying_body	command > send(report(evaluation(assessment_criteria)), certifying_body)
files in Data are read_only	read_only(data(files))
Generate report listing all preservation_attributes	command > generate(report(list(preservation_attributes)))
Do_not allow renaming objects in Data_folder	command > - allow(rename(data_folder(objects)))
Do_not replace AIP template with DIP template	command > - replace(template(aip), template(dip))
List records having data_format with an expired_lifetime	command > list(records(have(data_format(have(expired_lifetime)))))
Verify descriptive_metadata against semantic_term_list	validation > compare(descriptive_metadata, semantic_term_list)
Print financial audit_report	command > print(audit_report(finance))
Compare staffing_level required by a collection to current_staffing	command > compare(required(staffing_level,collection), current_staffing)
Store template for mapping AIP to DIP	command > store(template(map(aip,dip)))
Migrate files in Data_folder to new storage	command > migrate(data_folder(files), storage(new))
Protect the integrity of Data_folder	command > protect(integrity(data_folder))
Generate periodic_audit for all evaluation of assessment_criteria	command > generate(periodic_audit(evaluation(assessment_criteria)))
Generate audit_trail for notifications on problems	command > generate(audit_trail(notifications(problems)))
Do_not allow deleting data in Trash	command > - allow(delete(trash(data)))
List all people with access_permission on collection	command > list(people(have(access_permission(collection))))
Verify the existence of required number of replicas	validation > existence(required(quantity(replicas)))
Print records containing number of master_copy	command > print(records(contain(quantity(master_copy))))
file is master_copy	master_copy(file)
Store dates of denied_access reports	command > store(dates(reports(denied_access)))
Transfer data to new storage	command > transfer(data, storage(new))
Repair all files in collection omicron	command > repair(files(collection(omicron)))
Generate template for parsing descriptive_metadata	command > generate(template(parse(descriptive_metadata)))
Do_not delete information from metadata	command > - delete(metadata(information))
List staff who have archivist_execution_permission on collection	command > list(staff(have(archivist_execution_permission(collection))))
Verify existence of preservation_attributes of micro_service	validation > existence(preservation_attributes(micro_service))
Check if iota is collection	validation > collection(iota)
Create DIP from AIP	command > create(dip,aip)
Store template for parsing an AIP	command > store(template(parse(aip)))
Migrate data to new storage	command > migrate(data, storage(new))
On ingestion into collection gamma send an email to curator of the collection	when > ingestion(collection(gamma)); do > command > send(email, curator(collection))
Validate SIP template	validation > template(sip)
Generate report on risk	command > generate(report(risk))
Do_not migrate data in Data_directory to new storage	command > - migrate(data_directory(data), storage(new))
List staffing_plan containing required training_courses	command > list(staffing_plan(contain(required(training_courses))))
Verify existence of Service_Level_Agreement of each collection	validation > existence(collection(Service_Level_Agreement))
Check if file is master_copy	validation > master_copy(file)
Create AIP template from SIP template	command > create(template(aip), template(sip))
Synchronize replicas and generate error report	command > synchronize(replicas) ^ command > generate(report(error))
Replace AIP template with DIP template	command > replace(template(aip), template(dip))
On replication of files in collection Validate checksum	when > replication(collection(files)); do > validation > checksum
Update AIP template	command > update(template(aip))
Generate monthly report on risk	command > generate(monthly(report(risk)))
Do_not delete data in the Data_directory	command > - delete(data_directory(data))
List rules specific to a collection	command > list(rules(specific(collection)))
Print audit_trail of changes to hardware	command > print(audit_trail(changes(hardware)))
Check if all files in collection are readable by members of the prism_group	validation > readable(collection(files),  prism_group(members))
Create rule based_on AIP template	command > create(rule, template(aip))
Move Leica folder to Trash	command > move(folder(leica), trash)
On deletion of files from collection erase metadata	when > deletion(collection(files)); do > command > erase(metadata)
the data in Trash is owned by the administrator_account	own(trash(data), administrator_account)
Send email to staff who have archivist_execution_permission on collection	command > send(email,staff) ^ have(staff, archivist_execution_permission(collection))
Generate planning_approval_report listing all changes to procedures	command > generate(planning_approval_report(list(changes(procedures))))
Generate report summarizing information of micro_services	command > generate(report(summary(information(micro_services))))
Do_not allow opening files in Trash	command > - allow(open(trash(files)))
List micro_services referenced by a rule	command > list(micro_services(reference(rule)))
Print preservation_metadata template	command > print(template(preservation_metadata))
Check if every file readable_by Tom is_also readable_by Jim	validation > readable(file,tom) :- readable(file,jim)
Create an AIP based_on the AIP template	command > create(aip, template(aip))
Replace current_staffing with staffing_expertise	command > replace(current_staffing, staffing_expertise)
On ingestion to collection beta use resource from resource_group tape_resc_1	when > ingestion(collection(beta)); do > command > use(resource, resource_group(tape_resc_1)
Rename collection	command > rename(collection)
Check if every record readable_by Jim is_also readable_by Tom	validation > readable(record,jim) :- readable(record,tom)
Do_not allow opening files in Data for writing	command > - allow(open(data(files)) ^ write(files))
List persistent_state_information generated by a micro_service	command > list(persistent_state_information(generate(micro_service)))
Print micro_services referenced by a rule	command > print(micro_services(reference(rule)))
Check if file in Data_folder is master_copy	validation > master_copy(data_folder(file))
Compare actual storage_locations with allowed storage_locations	command > compare(actual(storage_locations), allowed(storage_locations))
Validate checksum	validation > checksum
Replace collection gamma with collection iota	command > replace(collection(gamma), collection(iota))
When Data_folder is full send email to administrator	when > full(data_folder); do > command > send(email, administrator)
Print report listing all changes to hardware	command > print(report(list(changes(hardware))))
Generate audit_trail listing all notifications of problems	command > generate(audit_trail(list(notifications(problems))))
Generate audit_report for evaluation of micro_services	command > generate(audit_report(evaluation(micro_services)))
Do_not delete information from collection	command > - delete(collection(information))
List rules summarizing information of micro_services	command > list(rules(summary(information(micro_services))))
Print staff_experience report	command > print(report(staff_experience))
Check if a data_object in Trash is expired	validation > expiry(trash(data_object))
Compare descriptive_metadata to preservation_metadata	command > compare(descriptive_metadata, preservation_metadata)
Compare AIP content with AIP template and list all non_compliant files	command > compare(content(aip), template(aip)) ^ command > list(files(non_compliant))
Update expiry_time	command > update(expiry_time)
When resource resc_24 is full migrate files to resource resc_25	when > full(resource(resc_24)); do > command > migrate(files, resource(resc_25))